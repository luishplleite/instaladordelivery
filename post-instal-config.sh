#!/bin/bash

#===============================================================================
# TimePulse Delivery - Script de Configura√ß√£o P√≥s-Instala√ß√£o
#===============================================================================
# 
# Execute este script AP√ìS configurar as credenciais do Supabase no arquivo .env
# Este script automatiza a configura√ß√£o inicial do banco de dados e testes
#
# Uso: sudo bash post-install-config.sh
#
#===============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configura√ß√µes
INSTALL_DIR="/opt/timepulse"
SERVICE_USER="timepulse"

#===============================================================================
# FUN√á√ïES AUXILIARES
#===============================================================================

print_header() {
    echo ""
    echo -e "${CYAN}=============================================================================${NC}"
    echo -e "${CYAN}            TIMEPULSE DELIVERY - CONFIGURA√á√ÉO P√ìS-INSTALA√á√ÉO${NC}"
    echo -e "${CYAN}=============================================================================${NC}"
    echo ""
}

print_step() {
    echo ""
    echo -e "${BLUE}üîß $1${NC}"
    echo -e "${BLUE}$(printf '=%.0s' {1..80})${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "Este script deve ser executado como root (use sudo)"
        exit 1
    fi
}

#===============================================================================
# VERIFICA√á√ïES INICIAIS
#===============================================================================

print_header
check_root

cd "$INSTALL_DIR"

print_step "VERIFICANDO CONFIGURA√á√ÉO"

# Verificar se arquivo .env existe
if [ ! -f ".env" ]; then
    print_error "Arquivo .env n√£o encontrado. Execute primeiro o script de instala√ß√£o."
    exit 1
fi

# Verificar se credenciais do Supabase est√£o configuradas
if grep -q "sua-url-do-supabase" .env || grep -q "sua_chave_publica_aqui" .env; then
    print_error "Credenciais do Supabase ainda n√£o foram configuradas no arquivo .env"
    print_info "Edite o arquivo $INSTALL_DIR/.env com suas credenciais antes de continuar"
    exit 1
fi

print_success "Arquivo .env configurado"

#===============================================================================
# COLETA DE INFORMA√á√ïES
#===============================================================================

print_step "CONFIGURA√á√ÉO INTERATIVA"

# Solicitar configura√ß√µes adicionais
echo -e "${CYAN}üìù Vamos configurar algumas op√ß√µes adicionais:${NC}"
echo ""

# Dom√≠nio/IP
read -p "üåê Qual dom√≠nio ou IP ser√° usado para acessar o sistema? (ex: localhost, 192.168.1.100, meudominio.com): " DOMAIN
if [ -z "$DOMAIN" ]; then
    DOMAIN="localhost"
fi

# Porta personalizada
read -p "üîå Qual porta usar para a aplica√ß√£o? (padr√£o: 3000): " APP_PORT
if [ -z "$APP_PORT" ]; then
    APP_PORT="3000"
fi

# SSL/HTTPS
read -p "üîí Deseja configurar SSL/HTTPS automaticamente? (s/N): " SETUP_SSL
SETUP_SSL=${SETUP_SSL,,}

# Email para SSL (se necess√°rio)
if [[ "$SETUP_SSL" == "s" || "$SETUP_SSL" == "sim" ]]; then
    read -p "üìß Digite seu email para o certificado SSL: " SSL_EMAIL
    if [ -z "$SSL_EMAIL" ]; then
        print_warning "Email n√£o fornecido. SSL ser√° configurado manualmente depois."
        SETUP_SSL="n"
    fi
fi

# Backup autom√°tico
read -p "üíæ Configurar backup autom√°tico di√°rio? (S/n): " SETUP_BACKUP
SETUP_BACKUP=${SETUP_BACKUP,,}
if [[ "$SETUP_BACKUP" != "n" && "$SETUP_BACKUP" != "nao" ]]; then
    SETUP_BACKUP="s"
fi

#===============================================================================
# ATUALIZA√á√ÉO DA CONFIGURA√á√ÉO
#===============================================================================

print_step "ATUALIZANDO CONFIGURA√á√ïES"

# Atualizar porta no .env se diferente de 3000
if [ "$APP_PORT" != "3000" ]; then
    print_info "Atualizando porta da aplica√ß√£o para $APP_PORT..."
    sed -i "s/PORT=3000/PORT=$APP_PORT/g" .env
    
    # Atualizar configura√ß√£o do PM2
    sed -i "s/PORT: 3000/PORT: $APP_PORT/g" ecosystem.config.js
    
    # Atualizar configura√ß√£o do Nginx
    sed -i "s/proxy_pass http:\/\/localhost:3000/proxy_pass http:\/\/localhost:$APP_PORT/g" /etc/nginx/sites-available/timepulse
fi

# Atualizar server_name no Nginx
if [ "$DOMAIN" != "localhost" ]; then
    print_info "Configurando dom√≠nio $DOMAIN no Nginx..."
    sed -i "s/server_name localhost/server_name $DOMAIN/g" /etc/nginx/sites-available/timepulse
fi

print_success "Configura√ß√µes atualizadas"

#===============================================================================
# CONFIGURA√á√ÉO DO SSL/HTTPS
#===============================================================================

if [[ "$SETUP_SSL" == "s" ]]; then
    print_step "CONFIGURANDO SSL/HTTPS"
    
    # Instalar Certbot
    print_info "Instalando Certbot..."
    apt-get update -qq
    apt-get install -y -qq certbot python3-certbot-nginx
    
    # Recarregar Nginx antes do SSL
    nginx -t && systemctl reload nginx
    
    # Obter certificado SSL
    print_info "Obtendo certificado SSL para $DOMAIN..."
    if certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos --email "$SSL_EMAIL" --redirect; then
        print_success "SSL configurado com sucesso"
        
        # Configurar renova√ß√£o autom√°tica
        print_info "Configurando renova√ß√£o autom√°tica do SSL..."
        (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -
        
    else
        print_warning "Falha ao configurar SSL. Verifique se o dom√≠nio est√° apontando corretamente."
    fi
fi

#===============================================================================
# CONFIGURA√á√ÉO DE FIREWALL AVAN√áADO
#===============================================================================

print_step "CONFIGURANDO FIREWALL AVAN√áADO"

# Permitir porta personalizada se diferente de 80/443
if [ "$APP_PORT" != "80" ] && [ "$APP_PORT" != "443" ] && [ "$APP_PORT" != "3000" ]; then
    print_info "Permitindo porta $APP_PORT no firewall..."
    ufw allow from 127.0.0.1 to any port "$APP_PORT"
fi

# Configura√ß√£o adicional de seguran√ßa
print_info "Aplicando configura√ß√µes de seguran√ßa..."

# Limitar tentativas de conex√£o SSH
ufw limit ssh

# Permitir apenas conex√µes estabelecidas
ufw allow out on any to any port 53  # DNS
ufw allow out on any to any port 80  # HTTP
ufw allow out on any to any port 443 # HTTPS
ufw allow out on any to any port 123 # NTP

systemctl restart ufw

print_success "Firewall configurado"

#===============================================================================
# TESTE DA APLICA√á√ÉO
#===============================================================================

print_step "TESTANDO APLICA√á√ÉO"

# Reiniciar aplica√ß√£o com novas configura√ß√µes
print_info "Reiniciando aplica√ß√£o..."
sudo -u "$SERVICE_USER" pm2 restart timepulse-delivery

# Aguardar inicializa√ß√£o
print_info "Aguardando inicializa√ß√£o..."
sleep 10

# Testar se aplica√ß√£o est√° respondendo
if sudo -u "$SERVICE_USER" pm2 list | grep -q "online"; then
    print_success "Aplica√ß√£o est√° online no PM2"
else
    print_error "Aplica√ß√£o n√£o est√° online no PM2"
    print_info "Verificando logs..."
    sudo -u "$SERVICE_USER" pm2 logs timepulse-delivery --lines 10
fi

# Testar conectividade HTTP
print_info "Testando conectividade HTTP..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost:"$APP_PORT" | grep -q "200\|404"; then
    print_success "Aplica√ß√£o respondendo na porta $APP_PORT"
else
    print_warning "Aplica√ß√£o pode n√£o estar respondendo corretamente"
fi

# Testar Nginx
print_info "Testando Nginx..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200\|404"; then
    print_success "Nginx est√° funcionando"
else
    print_warning "Nginx pode ter problemas"
fi

#===============================================================================
# CONFIGURA√á√ÉO DE MONITORAMENTO
#===============================================================================

print_step "CONFIGURANDO MONITORAMENTO"

# Criar script de health check
cat > /usr/local/bin/timepulse-healthcheck << EOF
#!/bin/bash

# Health check para TimePulse Delivery

check_app() {
    if ! sudo -u "$SERVICE_USER" pm2 list | grep -q "timepulse-delivery.*online"; then
        echo "CRITICAL: Aplica√ß√£o n√£o est√° online"
        return 1
    fi
    
    if ! curl -s http://localhost:$APP_PORT > /dev/null; then
        echo "CRITICAL: Aplica√ß√£o n√£o est√° respondendo"
        return 1
    fi
    
    echo "OK: Aplica√ß√£o funcionando normalmente"
    return 0
}

check_nginx() {
    if ! systemctl is-active --quiet nginx; then
        echo "CRITICAL: Nginx n√£o est√° funcionando"
        return 1
    fi
    
    echo "OK: Nginx funcionando normalmente"
    return 0
}

check_disk() {
    DISK_USAGE=\$(df /opt | tail -1 | awk '{print \$5}' | sed 's/%//')
    if [ "\$DISK_USAGE" -gt 90 ]; then
        echo "WARNING: Disco com \$DISK_USAGE% de uso"
        return 1
    fi
    
    echo "OK: Disco com \$DISK_USAGE% de uso"
    return 0
}

check_memory() {
    MEM_USAGE=\$(free | grep Mem | awk '{printf "%.0f", \$3/\$2 * 100.0}')
    if [ "\$MEM_USAGE" -gt 90 ]; then
        echo "WARNING: Mem√≥ria com \$MEM_USAGE% de uso"
        return 1
    fi
    
    echo "OK: Mem√≥ria com \$MEM_USAGE% de uso"
    return 0
}

# Executar checks
echo "TimePulse Health Check - \$(date)"
echo "======================================"

check_app
check_nginx  
check_disk
check_memory

echo ""
EOF

chmod +x /usr/local/bin/timepulse-healthcheck

# Configurar cron para health check (a cada 5 minutos)
(crontab -l 2>/dev/null; echo "*/5 * * * * /usr/local/bin/timepulse-healthcheck >> /var/log/timepulse/healthcheck.log 2>&1") | crontab -

print_success "Monitoramento configurado"

#===============================================================================
# CONFIGURA√á√ÉO DE BACKUP
#===============================================================================

if [[ "$SETUP_BACKUP" == "s" ]]; then
    print_step "CONFIGURANDO BACKUP AUTOM√ÅTICO"
    
    # Criar script de backup melhorado
    cat > /usr/local/bin/timepulse-backup-advanced << 'EOF'
#!/bin/bash

BACKUP_DIR="/var/backups/timepulse"
DATE=$(date +%Y%m%d_%H%M%S)
INSTALL_DIR="/opt/timepulse"

# Criar diret√≥rios
mkdir -p "$BACKUP_DIR"/{app,configs,logs}

# Backup da aplica√ß√£o
echo "Fazendo backup da aplica√ß√£o..."
tar -czf "$BACKUP_DIR/app/app_$DATE.tar.gz" \
    --exclude='node_modules' \
    --exclude='dist' \
    --exclude='*.log' \
    -C /opt timepulse

# Backup das configura√ß√µes
echo "Fazendo backup das configura√ß√µes..."
cp /etc/nginx/sites-available/timepulse "$BACKUP_DIR/configs/nginx_$DATE.conf"
cp "$INSTALL_DIR/.env" "$BACKUP_DIR/configs/env_$DATE"
cp "$INSTALL_DIR/ecosystem.config.js" "$BACKUP_DIR/configs/pm2_$DATE.js"

# Backup dos logs importantes
echo "Fazendo backup dos logs..."
tar -czf "$BACKUP_DIR/logs/logs_$DATE.tar.gz" /var/log/timepulse/ 2>/dev/null || true

# Limpeza de backups antigos (manter 30 dias)
find "$BACKUP_DIR" -type f -mtime +30 -delete

# Relat√≥rio
TOTAL_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
echo "Backup conclu√≠do em $BACKUP_DIR"
echo "Tamanho total dos backups: $TOTAL_SIZE"

# Log
echo "$(date): Backup realizado com sucesso" >> /var/log/timepulse/backup.log
EOF

    chmod +x /usr/local/bin/timepulse-backup-advanced
    
    # Configurar backup di√°rio √†s 3h
    (crontab -l 2>/dev/null | grep -v timepulse-backup; echo "0 3 * * * /usr/local/bin/timepulse-backup-advanced") | crontab -
    
    print_success "Backup autom√°tico configurado (di√°rio √†s 3h)"
fi

#===============================================================================
# OTIMIZA√á√ïES DO SISTEMA
#===============================================================================

print_step "APLICANDO OTIMIZA√á√ïES"

# Otimiza√ß√µes do Node.js
print_info "Configurando otimiza√ß√µes do Node.js..."
echo 'export NODE_OPTIONS="--max-old-space-size=512"' >> /home/$SERVICE_USER/.bashrc

# Otimiza√ß√µes do sistema
print_info "Aplicando otimiza√ß√µes do sistema..."

# Aumentar limites de arquivo
cat > /etc/security/limits.d/timepulse.conf << EOF
$SERVICE_USER soft nofile 65536
$SERVICE_USER hard nofile 65536
$SERVICE_USER soft nproc 32768
$SERVICE_USER hard nproc 32768
EOF

# Otimiza√ß√µes de rede
cat > /etc/sysctl.d/99-timepulse.conf << EOF
# Otimiza√ß√µes para aplica√ß√£o web
net.core.somaxconn = 65536
net.core.netdev_max_backlog = 5000
net.ipv4.tcp_max_syn_backlog = 8192
net.ipv4.tcp_tw_reuse = 1
net.ipv4.ip_local_port_range = 1024 65000
EOF

sysctl -p /etc/sysctl.d/99-timepulse.conf

print_success "Otimiza√ß√µes aplicadas"

#===============================================================================
# RELAT√ìRIO FINAL
#===============================================================================

print_step "CONFIGURA√á√ÉO CONCLU√çDA"

echo ""
echo -e "${GREEN}üéâ CONFIGURA√á√ÉO P√ìS-INSTALA√á√ÉO CONCLU√çDA! üéâ${NC}"
echo ""
echo -e "${CYAN}üìä RESUMO DA CONFIGURA√á√ÉO:${NC}"
echo ""
echo -e "${YELLOW}üåê Dom√≠nio/IP:${NC} $DOMAIN"
echo -e "${YELLOW}üîå Porta da aplica√ß√£o:${NC} $APP_PORT"
echo -e "${YELLOW}üîí SSL/HTTPS:${NC} $([ "$SETUP_SSL" == "s" ] && echo "Configurado" || echo "N√£o configurado")"
echo -e "${YELLOW}üíæ Backup autom√°tico:${NC} $([ "$SETUP_BACKUP" == "s" ] && echo "Ativado" || echo "Desativado")"
echo ""
echo -e "${CYAN}üîó URLs DE ACESSO:${NC}"
echo ""
if [[ "$SETUP_SSL" == "s" ]]; then
    echo -e "${GREEN}üîí HTTPS (Seguro):${NC} https://$DOMAIN"
fi
echo -e "${YELLOW}üåê HTTP:${NC} http://$DOMAIN"
echo ""
echo -e "${CYAN}üõ†Ô∏è  COMANDOS DE ADMINISTRA√á√ÉO:${NC}"
echo ""
echo -e "${YELLOW}‚Ä¢ Status geral:${NC} timepulse-admin status"
echo -e "${YELLOW}‚Ä¢ Reiniciar:${NC} timepulse-admin restart"
echo -e "${YELLOW}‚Ä¢ Ver logs:${NC} timepulse-admin logs"
echo -e "${YELLOW}‚Ä¢ Monitorar:${NC} timepulse-admin monitor"
echo -e "${YELLOW}‚Ä¢ Atualizar:${NC} timepulse-admin update"
echo -e "${YELLOW}‚Ä¢ Health check:${NC} timepulse-healthcheck"
echo ""
echo -e "${CYAN}üìã PR√ìXIMOS PASSOS:${NC}"
echo ""
echo -e "${YELLOW}1.${NC} Acesse o sistema via navegador"
echo -e "${YELLOW}2.${NC} Execute o script SQL do banco no Supabase:"
echo -e "   ${CYAN}$INSTALL_DIR/setup-database.sql${NC}"
echo -e "${YELLOW}3.${NC} Fa√ßa login com: admin@timepulse.com / 123456"
echo -e "${YELLOW}4.${NC} Configure produtos e usu√°rios"
echo -e "${YELLOW}5.${NC} Teste o sistema de tempo real"
echo ""
echo -e "${GREEN}‚úÖ Sistema totalmente configurado e pronto para uso!${NC}"
echo ""

# Executar health check final
print_info "Executando verifica√ß√£o final..."
/usr/local/bin/timepulse-healthcheck

exit 0
